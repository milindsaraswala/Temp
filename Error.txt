import { FieldDefinition, FormDefinition, SectionDefinition } from "../models";
import ExpressEvaluator from "./ExpressionEvaluator";
import { getExpressionDependencies } from "./ExpressionUtils";

export const buildInitialFormData = (def: FormDefinition): any => {
  const formData: any = {}

  const initField = (field: FieldDefinition) => {
    if (field.defaultExpression) {
      try {
        const dependsOn = getExpressionDependencies(field.defaultExpression)
        const allFilled = dependsOn.every((key) => !!formData[key])

        if (allFilled) {
          formData[field.name] = ExpressEvaluator(field.defaultExpression, formData)
        } else {
          formData[field.name] = ""
        }
      } catch {
        formData[field.name] = ""
      }
    } else if (field.defaultValue !== undefined) {
      formData[field.name] = field.defaultValue
    } else {
      formData[field.name] = ""
    }
  }

  const walkSections = (sections: SectionDefinition[]) => {
    sections.forEach(section => {
      if (section.fields) {
        section.fields.forEach(initField)
      }
      if (section.sections) {
        walkSections(section.sections)
      }
    })
  }

  // Top-level fields
  if (def.fields) {
    def.fields.forEach(initField)
  }

  // Section fields (nested)
  if (def.sections) {
    walkSections(def.sections)
  }

  return formData
}
